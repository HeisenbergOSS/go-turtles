package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"strconv"

	"github.com/heisenbergoss/go-turtles/graph/model"
	"github.com/heisenbergoss/go-turtles/internal/data"
	"github.com/heisenbergoss/go-turtles/internal/data/query"
	"gorm.io/gorm"
)

// Fact is the resolver for the fact field.
func (r *queryResolver) Fact(ctx context.Context, id string) (*model.Fact, error) {
	q := query.Use(r.DB)
	// Convert the GraphQL ID (string) to an integer
	factID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}

	face, err := q.WithContext(ctx).Fact.Preload(q.Fact.Parent).Preload(q.Fact.Children).Where(q.Fact.ID.Eq(uint(factID))).First()
	if err != nil {
		// Return null if not found, or the actual error for other issues
		if err == gorm.ErrRecordNotFound {
			return nil, nil
		}
		return nil, err
	}

	return toGraphQLFact(face), nil
}

// TopLevelFacts is the resolver for the topLevelFacts field.
func (r *queryResolver) TopLevelFacts(ctx context.Context) ([]*model.Fact, error) {
	q := query.Use(r.DB)

	// Find all facts where the ParentID is NULL.
	// Also preload their direct children to avoid N+1 query problems.
	facts, err := q.Fact.WithContext(ctx).Where(q.Fact.ParentID.IsNull()).Preload(q.Fact.Children).Find()
	if err != nil {
		return nil, err
	}

	// Convert our database models to GraphQL models
	return toGraphQLFactList(facts), nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

// toGraphQLFact is a helper function to convert our GORM database model to a GraphQL model.
func toGraphQLFact(f *data.Fact) *model.Fact {
	if f == nil {
		return nil
	}
	return &model.Fact{
		ID:        strconv.Itoa(int(f.ID)), // Convert uint ID to string for GraphQL
		Title:     f.Title,
		Content:   f.Content,
		SourceURL: &f.SourceURL,
		Parent:    toGraphQLFact(f.Parent),       // Recursively convert the parent
		Children:  toGraphQLFactList(f.Children), // Convert the list of children
		CreatedAt: f.CreatedAt.String(),
		UpdatedAt: f.UpdatedAt.String(),
	}
}

// toGraphQLFactList is a helper for converting a slice of database facts.
func toGraphQLFactList(facts []*data.Fact) []*model.Fact {
	out := make([]*model.Fact, len(facts))
	for i, f := range facts {
		out[i] = toGraphQLFact(f)
	}
	return out
}

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *queryResolver) Ping(ctx context.Context) (*model.PingResponse, error) {
	return &model.PingResponse{
		Message:   "Pong!",
		Timestamp: time.Now().Format(time.RFC3339),
	}, nil
}
*/
