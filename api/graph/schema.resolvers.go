package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"strconv"
	"strings"

	"github.com/heisenbergoss/go-turtles/graph/model"
	"github.com/heisenbergoss/go-turtles/internal/data"
	"github.com/heisenbergoss/go-turtles/internal/data/query"
	"gorm.io/gorm"
)

// Fact is the resolver for the fact field.
func (r *queryResolver) Fact(ctx context.Context, id string) (*model.Fact, error) {
	q := query.Use(r.DB)
	// Convert the GraphQL ID (string) to an integer
	factID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}

	face, err := q.WithContext(ctx).Fact.Preload(q.Fact.Parent).Preload(q.Fact.Children).Where(q.Fact.ID.Eq(uint(factID))).First()
	if err != nil {
		// Return null if not found, or the actual error for other issues
		if err == gorm.ErrRecordNotFound {
			return nil, nil
		}
		return nil, err
	}

	return toGraphQLFact(face), nil
}

// TopLevelFacts is the resolver for the topLevelFacts field.
func (r *queryResolver) TopLevelFacts(ctx context.Context) ([]*model.Fact, error) {
	q := query.Use(r.DB)

	// Find all facts where the ParentID is NULL.
	// Also preload their direct children to avoid N+1 query problems.
	facts, err := q.Fact.WithContext(ctx).Where(q.Fact.ParentID.IsNull()).Preload(q.Fact.Children).Find()
	if err != nil {
		return nil, err
	}

	// Convert our database models to GraphQL models
	return toGraphQLFactList(facts), nil
}

// Search is the resolver for the search field.
func (r *queryResolver) Search(ctx context.Context, term string) ([]*model.Fact, error) {
	var dbFacts []*data.Fact

	// We need to format the search term for to_tsquery, which expects terms to be
	// joined by & (AND), | (OR), or ! (NOT). We'll join words with &.
	// This turns "measles mumps" into "measles & mumps".
	queryTerm := strings.Join(strings.Fields(strings.TrimSpace(term)), " & ")

	// sql query to search facts using full-text search.
	// It selects all columns from the 'facts' table.
	// Filters rows where the 'search_vector' matches the provided query string
	// (using 'english' text search configuration) and 'deleted_at' is NULL.
	// Results are ordered by the rank of the match in descending order.
	sql := `
		SELECT * FROM facts
		WHERE
			search_vector @@ to_tsquery('english', ?)
			AND deleted_at IS NULL
		ORDER BY
			ts_rank(search_vector, to_tsquery('english', ?)) DESC
	`

	err := r.DB.WithContext(ctx).Raw(sql, queryTerm, queryTerm).Scan(&dbFacts).Error
	if err != nil {
		return nil, err
	}

	return toGraphQLFactList(dbFacts), nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
